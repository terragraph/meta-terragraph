#!/bin/sh

# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

# Redirect stderr to stdout to capture errors in log file as well
exec 2>&1

DELAY=5

# HACK! wait between restarts to avoid races (ex. when unloading dpdk)
sleep $DELAY

while [ : ]; do

# load tg config environment variables
# shellcheck source=/dev/null
. /usr/sbin/config_get_env.sh

# check if dpdk is enabled
if [ "${DPDK_ENABLED:-0}" -ne "1" ]; then
  echo "dpdk is not enabled"
  sleep ${DELAY}
  continue
fi

# check other starting conditions
if [ ! -e "/dev/dhd" ]; then
  echo "Waiting for /dev/dhd"
  sleep ${DELAY}
  continue
fi
NUM_DEVICES=$(lspci -d 17cb:1201 | wc -l)
ATTACHED_DEVICES=$(lspci -nk | grep -c vfio-pci)
if [ "$NUM_DEVICES" -ne "$ATTACHED_DEVICES" ]; then
  echo "Waiting for devbind"
  sleep ${DELAY}
  continue
fi

# fib_vpp does not handle reconnects to vpp, so kill it now.
# use SIGKILL because if the event loop is blocked on vapi calls to a previous
# vpp instance, it will not respond to other signals.
killall -9 fib_vpp

while /bin/pidof vpp_chaperone; do
  echo "attempt to kill concurrent vpp_chaperone..."
  /usr/bin/killall vpp_chaperone
  sleep 0.5
done

echo "Starting vpp_chaperone..."
sv once vpp_chaperone

# Expose NXP dprc to VPP to obtain interfaces
# TODO: Source the dprc number from somewhere
exec env DPRC=dprc.2 taskset 0xffffffff /usr/bin/vpp -c /var/run/vpp/startup.conf 2>&1

done
